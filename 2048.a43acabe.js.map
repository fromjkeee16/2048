{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  'use strict';\nconst $09e991522ca7e64e$var$CLASSNAME = Object.freeze({\n    Start: 'start',\n    Restart: 'restart',\n    Hidden: 'hidden',\n    ActionButton: 'button'\n});\nconst $09e991522ca7e64e$var$LABEL = Object.freeze({\n    Start: 'Start',\n    Restart: 'Restart'\n});\nvar $a5fd07fa01589658$exports = {};\n'use strict';\n// required for jest to work correctly\n$parcel$global.structuredClone = (val)=>JSON.parse(JSON.stringify(val));\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Default number of starting tiles.\n   * @readonly\n   * @const\n   * @type {number}\n   */ static START_TILES_QUANTITY_DEFAULT = 2;\n    /**\n   * The default board configuration (a 4x4 grid of zeros).\n   * @readonly\n   * @const\n   * @type {number[][]}\n   */ static DEFAULT_BOARD = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    /**\n   * List of keys that represent movement directions.\n   * @readonly\n   * @const\n   * @type {Array<string>}\n   */ static MOVE_KEYS = Object.freeze([\n        'ArrowLeft',\n        'ArrowRight',\n        'ArrowUp',\n        'ArrowDown'\n    ]);\n    /**\n   * Enum for the status of the game.\n   * - `Idle`: The game has not started and is idling.\n   * - `Playing`: The game has started and is in progress.\n   * - `Lost`: The game has finished and the player lost.\n   * - `Won`: The game has finished and the player won.\n   *\n   * @readonly\n   * @enum {string}\n   */ static STATUS = Object.freeze({\n        Idle: 'idle',\n        Playing: 'playing',\n        Lost: 'lose',\n        Won: 'win'\n    });\n    /**\n   * Represents current {@link Game.STATUS|status} of the game\n   * @type {keyof typeof Game.STATUS}\n   * @private\n   * @default Game.STATUS.Idle\n   */ _status = $a5fd07fa01589658$var$Game.STATUS.Idle;\n    /**\n   * Represents current score of the game\n   * @type {number}\n   * @private\n   */ _score = 0;\n    /**\n   * Represents the current state (grid) of the game.\n   *\n   * The grid is stored as a 2D array where each element represents a tile.\n   * Empty tiles are represented by `0`, while others contain powers of two.\n   *\n   * @type {number[][]}\n   * @private\n   */ _state;\n    /**\n   * Creates a new game instance.\n   *\n   * This constructor initializes the game with a given board state and the\n   * number of tiles to be placed at the start. It also allows for sanitizing\n   * the state (if necessary) to ensure that only valid values are used on the\n   * board.\n   *\n   * @param {Object} options - The configuration options for the game instance.\n   * @param {number[][]} [options.initialState=null] - The initial state of\n   *   the board.\n   *\n   * If provided, the board will be initialized with the passed array, which\n   * must adhere to the 2D grid format. The values in the grid must either be\n   * `0` (empty space) or a power of 2 (e.g., 2, 4, 8, etc.). If no\n   * `initialState` is provided, the game will use the\n   * {@link DEFAULT_BOARD|default grid}.\n   *   @default\n   *   [\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0]\n   *   ]\n   *\n   * @param {number} [options.startTilesAmount=2] - The initial number of\n   *   random tiles to be placed on the board at the start of the game. This\n   *   is the number of tiles with values `2` or `4` that will be randomly\n   *   placed on the grid when the game begins. The tiles are placed randomly\n   *   in empty spots (values of `0`). If not provided,\n   * {@link START_TILES_QUANTITY_DEFAULT|default value} will be used.\n   *   @default 2\n   *\n   * @param {boolean} [options.forcePowerOfTwo=false] - Flag to determine\n   *   whether the grid values should be sanitized to ensure they are all\n   *   powers of two.\n   *   - If `true`, all values that are not powers of 2 will be adjusted to\n   *     the nearest lower power of 2 or set to `0`.\n   *   - If `false`, invalid values will be set to `0`.\n   *   @default false\n   */ constructor({ initialState: initialState = null, startTilesAmount: startTilesAmount = $a5fd07fa01589658$var$Game.START_TILES_QUANTITY_DEFAULT, forcePowerOfTwo: forcePowerOfTwo = false } = {}){\n        const init = $a5fd07fa01589658$var$Game.sanitizeState(initialState || structuredClone($a5fd07fa01589658$var$Game.DEFAULT_BOARD), forcePowerOfTwo);\n        this._state = init;\n        this.initialState = structuredClone(init);\n        this.startTilesAmount = startTilesAmount;\n    }\n    /**\n   * Starts the game, setting:\n   * - the {@link Game._status|status} to {@link Game.STATUS.Playing|`playing`}\n   *\n   * Places new tiles on the board. The number of tiles placed at the start is\n   * determined by the `startTilesAmount` property.\n   */ start() {\n        this._status = $a5fd07fa01589658$var$Game.STATUS.Playing;\n        for(let i = 0; i < this.startTilesAmount; i++)this.placeNewTile();\n    }\n    /**\n   * Restarts the game, resetting:\n   * - the {@link Game._score|score} to `0`,\n   * - the {@link Game._state|state} to {@link DEFAULT_BOARD|default}\n   * - the {@link Game._status|status} to {@link Game.STATUS.Idle|`Idle`}\n   */ restart() {\n        this._state = structuredClone(this.initialState);\n        this._status = $a5fd07fa01589658$var$Game.STATUS.Idle;\n        this._score = 0;\n    // this.start();\n    }\n    // #region get (something)\n    /**\n   * Utility getter, used to get current board size (n*n)\n   * @returns {number}\n   */ get size() {\n        return this._state.length;\n    }\n    /**\n   * Returns {@link Game._score|current score} of the game\n   * @returns {number}\n   */ getScore() {\n        return this._score;\n    }\n    /**\n   * Returns {@link Game._state|current state} (grid) of the game\n   * @returns {number[][]}\n   */ getState() {\n        return this._state;\n    }\n    /**\n   * Returns {@link Game._status|current status} of the game\n   * @returns {string}\n   */ getStatus() {\n        return this._status;\n    }\n    // #endregion\n    // #region move handlers\n    move(key) {\n        if (this._status !== $a5fd07fa01589658$var$Game.STATUS.Playing) return;\n        switch(key){\n            case 'ArrowUp':\n                this.moveUp();\n                break;\n            case 'ArrowRight':\n                this.moveRight();\n                break;\n            case 'ArrowDown':\n                this.moveDown();\n                break;\n            case 'ArrowLeft':\n                this.moveLeft();\n                break;\n        }\n    }\n    handleMove() {\n        if (this._status !== $a5fd07fa01589658$var$Game.STATUS.Playing) return;\n        const prevState = structuredClone(this._state);\n        for(let col = 0; col < this.size; col++){\n            const numbers = [];\n            for(let row = 0; row < this.size; row++)if (this._state[row][col] !== 0) numbers.push(this._state[row][col]);\n            const merged = [];\n            let i = 0;\n            while(i < numbers.length)if (i + 1 < numbers.length && numbers[i] === numbers[i + 1]) {\n                const stackedNumber = numbers[i] * 2;\n                merged.push(stackedNumber);\n                this._score += stackedNumber;\n                i += 2;\n            } else {\n                merged.push(numbers[i]);\n                i++;\n            }\n            while(merged.length < this.size)merged.push(0);\n            for(let row = 0; row < this.size; row++)this._state[row][col] = merged[row];\n        }\n        const hasChanged = this._state.some((row, rowIndex)=>row.some((cell, colIndex)=>cell !== prevState[rowIndex][colIndex]));\n        if (hasChanged) this.placeNewTile();\n        this.updateGameStatus();\n    }\n    /**\n   * Handles the `ArrowUp` keypress\n   */ moveUp() {\n        this.handleMove();\n    }\n    /**\n   * Handles the `ArrowUp` keypress, rotating the grid 180°,\n   * applying the handler and rotating the grid back\n   */ moveDown() {\n        this.reverseGrid();\n        this.handleMove();\n        this.reverseGrid();\n    }\n    /**\n   * Handles the `ArrowLeft` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° clockwise\n   */ moveLeft() {\n        this.rotateClockwise();\n        this.handleMove();\n        this.rotateCounterClockwise();\n    }\n    /**\n   * Handles the `ArrowRight` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° counterclockwise\n   */ moveRight() {\n        this.rotateCounterClockwise();\n        this.handleMove();\n        this.rotateClockwise();\n    }\n    /**\n   * Reverses the order of rows in the grid.\n   *\n   * Used as a helper method in grid rotation.\n   */ reverseGrid() {\n        this._state.reverse();\n    }\n    /**\n   * Transposes the grid by swapping rows and columns.\n   *\n   * This method is used for rotating the grid by converting rows into columns.\n   */ transpose() {\n        for(let i = 0; i < this.size; i++)for(let j = i + 1; j < this.size; j++)[this._state[i][j], this._state[j][i]] = [\n            this._state[j][i],\n            this._state[i][j]\n        ];\n    }\n    /**\n   * Rotates the grid 90° clockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */ rotateClockwise() {\n        this.transpose();\n        this._state.forEach((row)=>row.reverse());\n    }\n    /**\n   * Rotates the grid 90° counterclockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */ rotateCounterClockwise() {\n        this._state.forEach((row)=>row.reverse());\n        this.transpose();\n    }\n    // #endregion\n    /**\n   * Updates the game status based on the current game state.\n   *\n   * - If no move is possible, the {@link Game._status|game status}\n   *  is set to `Lost`.\n   * - If the board contains the number 2048, the game status is set to `Won`.\n   *\n   * @returns {void}\n   */ updateGameStatus() {\n        if (!this.checkMovePossibility()) {\n            this._status = $a5fd07fa01589658$var$Game.STATUS.Lost;\n            return;\n        }\n        const hasWon = this._state.some((row)=>row.includes(2048));\n        if (hasWon) this._status = $a5fd07fa01589658$var$Game.STATUS.Won;\n    }\n    // #region utility\n    /**\n   * Sanitizes the game state by ensuring that all values are either 0 or\n   * a power of two. Optionally, forces values to the nearest lower power\n   * of two.\n   *\n   * - If `forcePowerOfTwo` is `true`, each value will be replaced with the\n   * nearest lower power of two.\n   * - If `forcePowerOfTwo` is `false`, only values that are already powers\n   * of two are kept, and others are set to 0.\n   *\n   * @param {number[][]} state - The 2D array representing the initial state\n   * of the game board passed as parameter to a constructor.\n   * @param {boolean} [forcePowerOfTwo=false] - Whether to force each value\n   * to be the nearest lower power of two. Defaults to `false`.\n   * @returns {number[][]} A sanitized 2D array with all values being either\n   * 0 or a power of two.\n   */ static sanitizeState(state, forcePowerOfTwo = false) {\n        const isPowerOfTwo = (n)=>n > 0 && (n & n - 1) === 0;\n        const getNearestLowerPowerOfTwo = (n)=>{\n            if (n <= 0) return 0;\n            return Math.pow(2, Math.floor(Math.log2(n)));\n        };\n        const sanitizeValue = (val)=>{\n            if (forcePowerOfTwo) return getNearestLowerPowerOfTwo(val);\n            return isPowerOfTwo(val) ? val : 0;\n        };\n        return state.map((row)=>row.map(sanitizeValue));\n    }\n    /**\n   * Returns a random value, either 2 or 4, with a 90% chance of getting 2.\n   *\n   * @returns {number} 2 or 4, depending on the random chance.\n   */ getTwoOrFour() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    /**\n   * Places a new tile (either 2 or 4) in a random empty cell on the game board.\n   * The tile is placed in a cell where the current value is 0.\n   * If there are no empty cells, no tile is placed.\n   */ placeNewTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this._state[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomCellIndex];\n            this._state[row][col] = this.getTwoOrFour();\n        }\n    }\n    /**\n   * Checks whether a move is possible in the current game state.\n   *\n   * A move is possible if:\n   * - There is at least one empty cell (value of 0).\n   * - Or if there are two adjacent cells (horizontally or vertically)\n   * with the same value.\n   *\n   * @returns {boolean} `true` if a move is possible, otherwise `false`.\n   */ checkMovePossibility() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            const cell = this._state[row][col];\n            if (!cell) return true;\n            if (col < this.size - 1 && this._state[row][col + 1] === cell) return true;\n            if (row < this.size - 1 && this._state[row + 1][col] === cell) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n// initialize the game with parameters:\n/**\n * const game = new Game({\n      startTilesAmount: 5,\n      initialState: [\n        [0, 0, 0, 0],\n        [0, 4, 0, 0],\n        [0, 0, 9, 0],\n        [0, 0, 0, 2],\n      ],\n      forcePowerOfTwo: true,\n});\n */ const $09e991522ca7e64e$var$initialState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports({\n    initialState: $09e991522ca7e64e$var$initialState\n});\nconst $09e991522ca7e64e$var$gameContainer = document.querySelector('.container');\nconst $09e991522ca7e64e$var$actionButton = $09e991522ca7e64e$var$gameContainer.querySelector('.controls button');\nconst $09e991522ca7e64e$var$scoreInfo = $09e991522ca7e64e$var$gameContainer.querySelector('.controls .info');\nconst $09e991522ca7e64e$var$scoreNumberField = $09e991522ca7e64e$var$gameContainer.querySelector('.controls .game-score');\nconst $09e991522ca7e64e$var$gameGrid = $09e991522ca7e64e$var$gameContainer.querySelector('.game-field tbody');\nconst $09e991522ca7e64e$var$messageStart = $09e991522ca7e64e$var$gameContainer.querySelector('.message-start');\nconst $09e991522ca7e64e$var$messageWin = $09e991522ca7e64e$var$gameContainer.querySelector('.message-win');\nconst $09e991522ca7e64e$var$messageLose = $09e991522ca7e64e$var$gameContainer.querySelector('.message-lose');\nfunction $09e991522ca7e64e$var$renderGame() {\n    $09e991522ca7e64e$var$updateScoreDisplay();\n    $09e991522ca7e64e$var$updateGameBoard();\n    $09e991522ca7e64e$var$updateGameStatusMessage();\n}\nfunction $09e991522ca7e64e$var$updateScoreDisplay() {\n    $09e991522ca7e64e$var$scoreNumberField.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateGameStatusMessage() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    const isGameIdle = gameStatus === $a5fd07fa01589658$exports.STATUS.Idle;\n    $09e991522ca7e64e$var$messageStart.classList.add($09e991522ca7e64e$var$CLASSNAME.Hidden);\n    $09e991522ca7e64e$var$messageWin.classList.add($09e991522ca7e64e$var$CLASSNAME.Hidden);\n    $09e991522ca7e64e$var$messageLose.classList.add($09e991522ca7e64e$var$CLASSNAME.Hidden);\n    $09e991522ca7e64e$var$actionButton.classList.remove($09e991522ca7e64e$var$CLASSNAME.Restart, $09e991522ca7e64e$var$CLASSNAME.Start);\n    $09e991522ca7e64e$var$actionButton.classList.add(isGameIdle ? $09e991522ca7e64e$var$CLASSNAME.Start : $09e991522ca7e64e$var$CLASSNAME.Restart);\n    $09e991522ca7e64e$var$actionButton.textContent = isGameIdle ? $09e991522ca7e64e$var$LABEL.Start : $09e991522ca7e64e$var$LABEL.Restart;\n    switch(gameStatus){\n        case $a5fd07fa01589658$exports.STATUS.Idle:\n            $09e991522ca7e64e$var$messageStart.classList.remove($09e991522ca7e64e$var$CLASSNAME.Hidden);\n            break;\n        case $a5fd07fa01589658$exports.STATUS.Won:\n            $09e991522ca7e64e$var$messageWin.classList.remove($09e991522ca7e64e$var$CLASSNAME.Hidden);\n            break;\n        case $a5fd07fa01589658$exports.STATUS.Lost:\n            $09e991522ca7e64e$var$messageLose.classList.remove($09e991522ca7e64e$var$CLASSNAME.Hidden);\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$updateGameBoard() {\n    const grid = $09e991522ca7e64e$var$game.getState();\n    const numRows = $09e991522ca7e64e$var$gameGrid.rows.length;\n    const numCols = $09e991522ca7e64e$var$gameGrid.rows[0].cells.length;\n    for(let rowIndex = 0; rowIndex < numRows; rowIndex++)for(let colIndex = 0; colIndex < numCols; colIndex++){\n        const cell = $09e991522ca7e64e$var$gameGrid.rows[rowIndex].cells[colIndex];\n        const value = grid[rowIndex][colIndex];\n        cell.textContent = value || '';\n        cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n    }\n}\ndocument.addEventListener('keydown', (ev)=>{\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    const validKeyPressed = $a5fd07fa01589658$exports.MOVE_KEYS.includes(ev.key);\n    if (!validKeyPressed) return;\n    ev.preventDefault();\n    if (gameStatus === $a5fd07fa01589658$exports.STATUS.Playing) {\n        $09e991522ca7e64e$var$game.move(ev.key);\n        $09e991522ca7e64e$var$renderGame();\n    }\n});\n$09e991522ca7e64e$var$actionButton.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS.Idle) $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$renderGame();\n});\n$09e991522ca7e64e$var$scoreInfo.addEventListener('click', ()=>{\n    // eslint-disable-next-line no-console\n    console.log($09e991522ca7e64e$var$game.getState());\n});\n$09e991522ca7e64e$var$renderGame();\n\n\n//# sourceMappingURL=2048.a43acabe.js.map\n","'use strict';\n\nconst CLASSNAME = Object.freeze({\n  Start: 'start',\n  Restart: 'restart',\n  Hidden: 'hidden',\n  ActionButton: 'button',\n});\nconst LABEL = Object.freeze({\n  Start: 'Start',\n  Restart: 'Restart',\n});\n\nconst Game = require('../modules/Game.class');\n\n// initialize the game with parameters:\n/**\n * const game = new Game({\n      startTilesAmount: 5,\n      initialState: [\n        [0, 0, 0, 0],\n        [0, 4, 0, 0],\n        [0, 0, 9, 0],\n        [0, 0, 0, 2],\n      ],\n      forcePowerOfTwo: true,\n});\n */\n\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst game = new Game({\n  initialState,\n});\n\nconst gameContainer = document.querySelector('.container');\nconst actionButton = gameContainer.querySelector('.controls button');\nconst scoreInfo = gameContainer.querySelector('.controls .info');\nconst scoreNumberField = gameContainer.querySelector('.controls .game-score');\nconst gameGrid = gameContainer.querySelector('.game-field tbody');\nconst messageStart = gameContainer.querySelector('.message-start');\nconst messageWin = gameContainer.querySelector('.message-win');\nconst messageLose = gameContainer.querySelector('.message-lose');\n\nfunction renderGame() {\n  updateScoreDisplay();\n  updateGameBoard();\n  updateGameStatusMessage();\n}\n\nfunction updateScoreDisplay() {\n  scoreNumberField.textContent = game.getScore();\n}\n\nfunction updateGameStatusMessage() {\n  const gameStatus = game.getStatus();\n  const isGameIdle = gameStatus === Game.STATUS.Idle;\n\n  messageStart.classList.add(CLASSNAME.Hidden);\n  messageWin.classList.add(CLASSNAME.Hidden);\n  messageLose.classList.add(CLASSNAME.Hidden);\n\n  actionButton.classList.remove(CLASSNAME.Restart, CLASSNAME.Start);\n\n  actionButton.classList.add(isGameIdle ? CLASSNAME.Start : CLASSNAME.Restart);\n  actionButton.textContent = isGameIdle ? LABEL.Start : LABEL.Restart;\n\n  switch (gameStatus) {\n    case Game.STATUS.Idle:\n      messageStart.classList.remove(CLASSNAME.Hidden);\n      break;\n    case Game.STATUS.Won:\n      messageWin.classList.remove(CLASSNAME.Hidden);\n      break;\n    case Game.STATUS.Lost:\n      messageLose.classList.remove(CLASSNAME.Hidden);\n      break;\n  }\n}\n\nfunction updateGameBoard() {\n  const grid = game.getState();\n  const numRows = gameGrid.rows.length;\n  const numCols = gameGrid.rows[0].cells.length;\n\n  for (let rowIndex = 0; rowIndex < numRows; rowIndex++) {\n    for (let colIndex = 0; colIndex < numCols; colIndex++) {\n      const cell = gameGrid.rows[rowIndex].cells[colIndex];\n      const value = grid[rowIndex][colIndex];\n\n      cell.textContent = value || '';\n      cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', (ev) => {\n  const gameStatus = game.getStatus();\n  const validKeyPressed = Game.MOVE_KEYS.includes(ev.key);\n\n  if (!validKeyPressed) {\n    return;\n  }\n\n  ev.preventDefault();\n\n  if (gameStatus === Game.STATUS.Playing) {\n    game.move(ev.key);\n    renderGame();\n  }\n});\n\nactionButton.addEventListener('click', () => {\n  if (game.getStatus() === Game.STATUS.Idle) {\n    game.start();\n  } else {\n    game.restart();\n  }\n  renderGame();\n});\n\nscoreInfo.addEventListener('click', () => {\n  // eslint-disable-next-line no-console\n  console.log(game.getState());\n});\n\nrenderGame();\n","'use strict';\n\n// required for jest to work correctly\nglobal.structuredClone = (val) => JSON.parse(JSON.stringify(val));\n\nclass Game {\n  /**\n   * Default number of starting tiles.\n   * @readonly\n   * @const\n   * @type {number}\n   */\n  static START_TILES_QUANTITY_DEFAULT = 2;\n\n  /**\n   * The default board configuration (a 4x4 grid of zeros).\n   * @readonly\n   * @const\n   * @type {number[][]}\n   */\n  static DEFAULT_BOARD = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  /**\n   * List of keys that represent movement directions.\n   * @readonly\n   * @const\n   * @type {Array<string>}\n   */\n  static MOVE_KEYS = Object.freeze([\n    'ArrowLeft',\n    'ArrowRight',\n    'ArrowUp',\n    'ArrowDown',\n  ]);\n\n  /**\n   * Enum for the status of the game.\n   * - `Idle`: The game has not started and is idling.\n   * - `Playing`: The game has started and is in progress.\n   * - `Lost`: The game has finished and the player lost.\n   * - `Won`: The game has finished and the player won.\n   *\n   * @readonly\n   * @enum {string}\n   */\n  static STATUS = Object.freeze({\n    Idle: 'idle',\n    Playing: 'playing',\n    Lost: 'lose',\n    Won: 'win',\n  });\n\n  /**\n   * Represents current {@link Game.STATUS|status} of the game\n   * @type {keyof typeof Game.STATUS}\n   * @private\n   * @default Game.STATUS.Idle\n   */\n  _status = Game.STATUS.Idle;\n  /**\n   * Represents current score of the game\n   * @type {number}\n   * @private\n   */\n  _score = 0;\n  /**\n   * Represents the current state (grid) of the game.\n   *\n   * The grid is stored as a 2D array where each element represents a tile.\n   * Empty tiles are represented by `0`, while others contain powers of two.\n   *\n   * @type {number[][]}\n   * @private\n   */\n  _state;\n\n  /**\n   * Creates a new game instance.\n   *\n   * This constructor initializes the game with a given board state and the\n   * number of tiles to be placed at the start. It also allows for sanitizing\n   * the state (if necessary) to ensure that only valid values are used on the\n   * board.\n   *\n   * @param {Object} options - The configuration options for the game instance.\n   * @param {number[][]} [options.initialState=null] - The initial state of\n   *   the board.\n   *\n   * If provided, the board will be initialized with the passed array, which\n   * must adhere to the 2D grid format. The values in the grid must either be\n   * `0` (empty space) or a power of 2 (e.g., 2, 4, 8, etc.). If no\n   * `initialState` is provided, the game will use the\n   * {@link DEFAULT_BOARD|default grid}.\n   *   @default\n   *   [\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0]\n   *   ]\n   *\n   * @param {number} [options.startTilesAmount=2] - The initial number of\n   *   random tiles to be placed on the board at the start of the game. This\n   *   is the number of tiles with values `2` or `4` that will be randomly\n   *   placed on the grid when the game begins. The tiles are placed randomly\n   *   in empty spots (values of `0`). If not provided,\n   * {@link START_TILES_QUANTITY_DEFAULT|default value} will be used.\n   *   @default 2\n   *\n   * @param {boolean} [options.forcePowerOfTwo=false] - Flag to determine\n   *   whether the grid values should be sanitized to ensure they are all\n   *   powers of two.\n   *   - If `true`, all values that are not powers of 2 will be adjusted to\n   *     the nearest lower power of 2 or set to `0`.\n   *   - If `false`, invalid values will be set to `0`.\n   *   @default false\n   */\n\n  constructor({\n    initialState = null,\n    startTilesAmount = Game.START_TILES_QUANTITY_DEFAULT,\n    forcePowerOfTwo = false,\n  } = {}) {\n    const init = Game.sanitizeState(\n      initialState || structuredClone(Game.DEFAULT_BOARD),\n      forcePowerOfTwo,\n    );\n\n    this._state = init;\n    this.initialState = structuredClone(init);\n    this.startTilesAmount = startTilesAmount;\n  }\n\n  /**\n   * Starts the game, setting:\n   * - the {@link Game._status|status} to {@link Game.STATUS.Playing|`playing`}\n   *\n   * Places new tiles on the board. The number of tiles placed at the start is\n   * determined by the `startTilesAmount` property.\n   */\n  start() {\n    this._status = Game.STATUS.Playing;\n\n    for (let i = 0; i < this.startTilesAmount; i++) {\n      this.placeNewTile();\n    }\n  }\n\n  /**\n   * Restarts the game, resetting:\n   * - the {@link Game._score|score} to `0`,\n   * - the {@link Game._state|state} to {@link DEFAULT_BOARD|default}\n   * - the {@link Game._status|status} to {@link Game.STATUS.Idle|`Idle`}\n   */\n  restart() {\n    this._state = structuredClone(this.initialState);\n    this._status = Game.STATUS.Idle;\n    this._score = 0;\n    // this.start();\n  }\n\n  // #region get (something)\n\n  /**\n   * Utility getter, used to get current board size (n*n)\n   * @returns {number}\n   */\n  get size() {\n    return this._state.length;\n  }\n\n  /**\n   * Returns {@link Game._score|current score} of the game\n   * @returns {number}\n   */\n  getScore() {\n    return this._score;\n  }\n\n  /**\n   * Returns {@link Game._state|current state} (grid) of the game\n   * @returns {number[][]}\n   */\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Returns {@link Game._status|current status} of the game\n   * @returns {string}\n   */\n  getStatus() {\n    return this._status;\n  }\n\n  // #endregion\n\n  // #region move handlers\n\n  move(key) {\n    if (this._status !== Game.STATUS.Playing) {\n      return;\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        this.moveUp();\n        break;\n      case 'ArrowRight':\n        this.moveRight();\n        break;\n      case 'ArrowDown':\n        this.moveDown();\n        break;\n      case 'ArrowLeft':\n        this.moveLeft();\n        break;\n    }\n  }\n\n  handleMove() {\n    if (this._status !== Game.STATUS.Playing) {\n      return;\n    }\n\n    const prevState = structuredClone(this._state);\n\n    for (let col = 0; col < this.size; col++) {\n      const numbers = [];\n\n      for (let row = 0; row < this.size; row++) {\n        if (this._state[row][col] !== 0) {\n          numbers.push(this._state[row][col]);\n        }\n      }\n\n      const merged = [];\n      let i = 0;\n\n      while (i < numbers.length) {\n        if (i + 1 < numbers.length && numbers[i] === numbers[i + 1]) {\n          const stackedNumber = numbers[i] * 2;\n\n          merged.push(stackedNumber);\n          this._score += stackedNumber;\n          i += 2;\n        } else {\n          merged.push(numbers[i]);\n          i++;\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        this._state[row][col] = merged[row];\n      }\n    }\n\n    const hasChanged = this._state.some(\n      (row, rowIndex) =>\n        row.some((cell, colIndex) => cell !== prevState[rowIndex][colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    if (hasChanged) {\n      this.placeNewTile();\n    }\n\n    this.updateGameStatus();\n  }\n\n  /**\n   * Handles the `ArrowUp` keypress\n   */\n  moveUp() {\n    this.handleMove();\n  }\n\n  /**\n   * Handles the `ArrowUp` keypress, rotating the grid 180°,\n   * applying the handler and rotating the grid back\n   */\n  moveDown() {\n    this.reverseGrid();\n    this.handleMove();\n    this.reverseGrid();\n  }\n\n  /**\n   * Handles the `ArrowLeft` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° clockwise\n   */\n  moveLeft() {\n    this.rotateClockwise();\n    this.handleMove();\n    this.rotateCounterClockwise();\n  }\n\n  /**\n   * Handles the `ArrowRight` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° counterclockwise\n   */\n  moveRight() {\n    this.rotateCounterClockwise();\n    this.handleMove();\n    this.rotateClockwise();\n  }\n\n  /**\n   * Reverses the order of rows in the grid.\n   *\n   * Used as a helper method in grid rotation.\n   */\n  reverseGrid() {\n    this._state.reverse();\n  }\n\n  /**\n   * Transposes the grid by swapping rows and columns.\n   *\n   * This method is used for rotating the grid by converting rows into columns.\n   */\n  transpose() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = i + 1; j < this.size; j++) {\n        [this._state[i][j], this._state[j][i]] = [\n          this._state[j][i],\n          this._state[i][j],\n        ];\n      }\n    }\n  }\n\n  /**\n   * Rotates the grid 90° clockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */\n  rotateClockwise() {\n    this.transpose();\n    this._state.forEach((row) => row.reverse());\n  }\n\n  /**\n   * Rotates the grid 90° counterclockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */\n  rotateCounterClockwise() {\n    this._state.forEach((row) => row.reverse());\n    this.transpose();\n  }\n\n  // #endregion\n\n  /**\n   * Updates the game status based on the current game state.\n   *\n   * - If no move is possible, the {@link Game._status|game status}\n   *  is set to `Lost`.\n   * - If the board contains the number 2048, the game status is set to `Won`.\n   *\n   * @returns {void}\n   */\n  updateGameStatus() {\n    if (!this.checkMovePossibility()) {\n      this._status = Game.STATUS.Lost;\n\n      return;\n    }\n\n    const hasWon = this._state.some((row) => row.includes(2048));\n\n    if (hasWon) {\n      this._status = Game.STATUS.Won;\n    }\n  }\n\n  // #region utility\n\n  /**\n   * Sanitizes the game state by ensuring that all values are either 0 or\n   * a power of two. Optionally, forces values to the nearest lower power\n   * of two.\n   *\n   * - If `forcePowerOfTwo` is `true`, each value will be replaced with the\n   * nearest lower power of two.\n   * - If `forcePowerOfTwo` is `false`, only values that are already powers\n   * of two are kept, and others are set to 0.\n   *\n   * @param {number[][]} state - The 2D array representing the initial state\n   * of the game board passed as parameter to a constructor.\n   * @param {boolean} [forcePowerOfTwo=false] - Whether to force each value\n   * to be the nearest lower power of two. Defaults to `false`.\n   * @returns {number[][]} A sanitized 2D array with all values being either\n   * 0 or a power of two.\n   */\n  static sanitizeState(state, forcePowerOfTwo = false) {\n    const isPowerOfTwo = (n) => n > 0 && (n & (n - 1)) === 0;\n\n    const getNearestLowerPowerOfTwo = (n) => {\n      if (n <= 0) {\n        return 0;\n      }\n\n      return Math.pow(2, Math.floor(Math.log2(n)));\n    };\n\n    const sanitizeValue = (val) => {\n      if (forcePowerOfTwo) {\n        return getNearestLowerPowerOfTwo(val);\n      }\n\n      return isPowerOfTwo(val) ? val : 0;\n    };\n\n    return state.map((row) => row.map(sanitizeValue));\n  }\n\n  /**\n   * Returns a random value, either 2 or 4, with a 90% chance of getting 2.\n   *\n   * @returns {number} 2 or 4, depending on the random chance.\n   */\n  getTwoOrFour() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  /**\n   * Places a new tile (either 2 or 4) in a random empty cell on the game board.\n   * The tile is placed in a cell where the current value is 0.\n   * If there are no empty cells, no tile is placed.\n   */\n  placeNewTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this._state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomCellIndex];\n\n      this._state[row][col] = this.getTwoOrFour();\n    }\n  }\n\n  /**\n   * Checks whether a move is possible in the current game state.\n   *\n   * A move is possible if:\n   * - There is at least one empty cell (value of 0).\n   * - Or if there are two adjacent cells (horizontally or vertically)\n   * with the same value.\n   *\n   * @returns {boolean} `true` if a move is possible, otherwise `false`.\n   */\n  checkMovePossibility() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const cell = this._state[row][col];\n\n        if (!cell) {\n          return true;\n        }\n\n        if (col < this.size - 1 && this._state[row][col + 1] === cell) {\n          return true;\n        }\n\n        if (row < this.size - 1 && this._state[row + 1][col] === cell) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // #endregion\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$global","globalThis","self","window","global","$09e991522ca7e64e$var$CLASSNAME","Object","freeze","Start","Restart","Hidden","ActionButton","$09e991522ca7e64e$var$LABEL","$a5fd07fa01589658$exports","structuredClone","val","JSON","parse","stringify","$a5fd07fa01589658$var$Game","START_TILES_QUANTITY_DEFAULT","DEFAULT_BOARD","MOVE_KEYS","STATUS","Idle","Playing","Lost","Won","_status","_score","_state","constructor","initialState","startTilesAmount","forcePowerOfTwo","init","sanitizeState","start","i","placeNewTile","restart","size","length","getScore","getState","getStatus","move","key","moveUp","moveRight","moveDown","moveLeft","handleMove","prevState","col","numbers","row","push","merged","stackedNumber","hasChanged","some","rowIndex","cell","colIndex","updateGameStatus","reverseGrid","rotateClockwise","rotateCounterClockwise","reverse","transpose","j","forEach","checkMovePossibility","hasWon","includes","state","isPowerOfTwo","n","getNearestLowerPowerOfTwo","Math","pow","floor","log2","sanitizeValue","map","getTwoOrFour","random","emptyCells","randomCellIndex","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$gameContainer","document","querySelector","$09e991522ca7e64e$var$actionButton","$09e991522ca7e64e$var$scoreInfo","$09e991522ca7e64e$var$scoreNumberField","$09e991522ca7e64e$var$gameGrid","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$renderGame","textContent","$09e991522ca7e64e$var$updateGameBoard","grid","numRows","rows","numCols","cells","value","className","$09e991522ca7e64e$var$updateGameStatusMessage","gameStatus","isGameIdle","classList","add","remove","addEventListener","ev","preventDefault","console","log"],"version":3,"file":"2048.a43acabe.js.map"}