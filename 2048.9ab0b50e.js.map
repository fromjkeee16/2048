{"mappings":"C,A,WCAA,a,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,EAEM,EAAY,OAAO,MAAM,CAAC,CAC9B,MAAO,QACP,QAAS,UACT,OAAQ,SACR,aAAc,QAChB,GACM,EAAQ,OAAO,MAAM,CAAC,CAC1B,MAAO,QACP,QAAS,SACX,G,E,C,EGXA,SAAS,EAAkB,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,CCVA,SAAS,EAAiB,CAAG,CAAE,CAAG,CAAE,CAAK,EAKrC,OAJI,KAAO,EACP,OAAO,cAAc,CAAC,EAAK,EAAK,CAAE,MAAO,EAAO,WAAY,CAAA,EAAM,aAAc,CAAA,EAAM,SAAU,CAAA,CAAK,GAClG,CAAG,CAAC,EAAI,CAAG,EAEX,CACX,CHHA,EAAO,eAAe,CAAG,SAAC,CAA1B,EAAkC,OAAA,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,G,EAE5D,IAAM,EAAN,eEMoC,EAAY,EFN1C,SAAA,IAsHQ,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAIR,CAAC,EAAA,EAJO,EACV,YAAA,CAAe,EADL,EAEV,gBAAA,CAAA,EAAA,AAAA,KAAA,IAAA,EAxHE,EAwHsB,4BAA4B,CAAA,EAAA,EAF1C,EAGV,eAAA,CC7HA,GAAI,CAAE,CAAA,ADIJ,IAAA,YAAA,CCJwB,EAAc,MAAM,AAAI,UAAU,qCD8D9D,AAAA,EAAA,IAAA,CAAA,UA1DI,EA0DW,MAAM,CAAC,IAAI,EAM1B,AAAA,EAAA,IAAA,CAAA,SAAS,GAUT,AAAA,EAAA,IAAA,CAAA,SAAA,KAAA,GAiDE,IAAM,EA3HJ,EA2HgB,aAAa,CAC7B,AALF,CAAA,AAAA,KAAA,IAAA,EAAe,KAAA,CAAA,GAKG,gBAAgB,EAAK,aAAa,EAHpD,AAAA,KAAA,IAAA,GAHU,EAUV,CAAA,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,YAAY,CAAG,gBAAgB,GACpC,IAAI,CAAC,gBAAgB,CAAG,C,CAlItB,OEM8B,EFN9B,C,CA4IJ,IAAA,QAAA,MAAA,WACE,IAAI,CAAC,OAAO,CA7IV,EA6IkB,MAAM,CAAC,OAAO,CAElC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,gBAAgB,CAAE,IACzC,IAAI,CAAC,YAAY,EAErB,C,E,CAQA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,MAAM,CAAG,gBAAgB,IAAI,CAAC,YAAY,EAC/C,IAAI,CAAC,OAAO,CA5JV,EA4JkB,MAAM,CAAC,IAAI,CAC/B,IAAI,CAAC,MAAM,CAAG,CAEhB,C,E,CAQI,IAAA,OAAJ,IAAA,WACE,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,AAC3B,C,E,CAMA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAMA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAMA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,OAAO,AACrB,C,E,CAMA,IAAA,OAAA,MAAA,SAAK,CAAG,EACN,GAAI,IAAI,CAAC,OAAO,GAxMd,EAwMwB,MAAM,CAAC,OAAO,CAIxC,OAAQ,GACN,IAAK,UACH,IAAI,CAAC,MAAM,GACX,KACF,KAAK,aACH,IAAI,CAAC,SAAS,GACd,KACF,KAAK,YACH,IAAI,CAAC,QAAQ,GACb,KACF,KAAK,YACH,IAAI,CAAC,QAAQ,EAEjB,CACF,C,E,CAEA,IAAA,aAAA,MAAA,WACE,GAAI,IAAI,CAAC,OAAO,GA7Nd,EA6NwB,MAAM,CAAC,OAAO,EAMxC,IAAK,IAFC,EAAY,gBAAgB,IAAI,CAAC,MAAM,EAEpC,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IAAO,CAGxC,IAAK,IAFC,EAAU,EAAE,CAET,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IAC7B,AAA0B,IAA1B,IAAI,CAAC,MAAM,CAAC,EAAI,CAAC,EAAI,EACvB,EAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAI,CAAC,EAAI,EAOtC,IAXA,IAQM,EAAS,EAAE,CACb,EAAI,EAED,EAAI,EAAQ,MAAM,EACvB,GAAI,EAAI,EAAI,EAAQ,MAAM,EAAI,CAAO,CAAC,EAAE,GAAK,CAAO,CAAC,EAAI,EAAE,CAAE,CAC3D,IAAM,EAAgB,AAAa,EAAb,CAAO,CAAC,EAAE,CAEhC,EAAO,IAAI,CAAC,GACZ,IAAI,CAAC,MAAM,EAAI,EACf,GAAK,CACP,MACE,EAAO,IAAI,CAAC,CAAO,CAAC,EAAE,EACtB,IAIJ,KAAO,EAAO,MAAM,CAAG,IAAI,CAAC,IAAI,EAC9B,EAAO,IAAI,CAAC,GAGd,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACjC,IAAI,CAAC,MAAM,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,AAEvC,CAQI,AANe,IAAI,CAAC,MAAM,CAAC,IAAI,CACjC,SAAC,CAAA,CAAK,CADR,EAEI,OAAA,EAAI,IAAI,CAAC,SAAC,CAAA,CAAM,CAAhB,EAA6B,OAAA,IAAS,CAAS,CAAC,EAAS,CAAC,EAAS,A,E,IAKrE,IAAI,CAAC,YAAY,GAGnB,IAAI,CAAC,gBAAgB,GACvB,C,E,CAKA,IAAA,SAAA,MAAA,WACE,IAAI,CAAC,UAAU,EACjB,C,E,CAMA,IAAA,WAAA,MAAA,WACE,IAAI,CAAC,WAAW,GAChB,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,WAAW,EAClB,C,E,CAOA,IAAA,WAAA,MAAA,WACE,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,sBAAsB,EAC7B,C,E,CAOA,IAAA,YAAA,MAAA,WACE,IAAI,CAAC,sBAAsB,GAC3B,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,eAAe,EACtB,C,E,CAOA,IAAA,cAAA,MAAA,WACE,IAAI,CAAC,MAAM,CAAC,OAAO,EACrB,C,E,CAOA,IAAA,YAAA,MAAA,WACE,IAAK,I,EAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAA,EACQ,CACvC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CACjB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAClB,CAHA,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAA,CAAA,CAAA,EAAA,CAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAGpC,CAAA,CAAA,EAAA,AAGP,C,E,CAQA,IAAA,kBAAA,MAAA,WACE,IAAI,CAAC,SAAS,GACd,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAC,CAArB,EAA6B,OAAA,EAAI,OAAO,E,EAC1C,C,E,CAQA,IAAA,yBAAA,MAAA,WACE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAC,CAArB,EAA6B,OAAA,EAAI,OAAO,E,GACxC,IAAI,CAAC,SAAS,EAChB,C,E,CAaA,IAAA,mBAAA,MAAA,WACE,GAAI,CAAC,IAAI,CAAC,oBAAoB,GAAI,CAChC,IAAI,CAAC,OAAO,CArXZ,EAqXoB,MAAM,CAAC,IAAI,CAE/B,MACF,CAII,AAFW,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAC,CAAjC,EAAyC,OAAA,EAAI,QAAQ,CAAC,K,IAGpD,CAAA,IAAI,CAAC,OAAO,CAAG,EAAK,MAAM,CAAC,GAAG,AAAH,CAE/B,C,E,CAgDA,IAAA,eAAA,MAAA,WACE,OAAO,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnC,C,E,CAOA,IAAA,eAAA,MAAA,WAGE,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACjC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IAC7B,AAA0B,IAA1B,IAAI,CAAC,MAAM,CAAC,EAAI,CAAC,EAAI,EACvB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IAAM,EAAkB,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAC/C,EAAA,CAAU,CAAC,EAAgB,CAAxC,EAAa,EAAb,GAAA,CAAK,EAAQ,EAAR,GAAb,AAEA,CAAA,IAAI,CAAC,MAAM,CAAC,EAAI,CAAC,EAAI,CAAG,IAAI,CAAC,YAAY,EAC3C,CACF,C,E,CAYA,IAAA,uBAAA,MAAA,WACE,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACjC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IAAO,CACxC,IAAM,EAAO,IAAI,CAAC,MAAM,CAAC,EAAI,CAAC,EAAI,CAElC,GAAI,CAAC,GAID,EAAM,IAAI,CAAC,IAAI,CAAG,GAAK,IAAI,CAAC,MAAM,CAAC,EAAI,CAAC,EAAM,EAAE,GAAK,GAIrD,EAAM,IAAI,CAAC,IAAI,CAAG,GAAK,IAAI,CAAC,MAAM,CAAC,EAAM,EAAE,CAAC,EAAI,GAAK,EAPvD,MAAO,CAAA,CAUX,CAGF,MAAO,CAAA,CACT,C,E,CEne8C,E,C,CF8YvC,IAAA,gBAAP,MAAA,SAAqB,CAAK,EAAE,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,CAWpB,EAAgB,SAAC,CAAvB,SACE,AAAI,EARJ,AAAI,AAS+B,GAT1B,EACA,EAGF,KAAK,GAAG,CAAC,EAAG,KAAK,KAAK,CAAC,KAAK,IAAI,CAKJ,KAG5B,AAfmB,AAeN,EAfU,GAAK,AAAC,CAAA,AAehB,EAfqB,AAerB,EAfyB,CAAA,GAAQ,EAe1B,EAAM,CACnC,EAEA,OAAO,EAAM,GAAG,CAAC,SAAC,CAAlB,EAA0B,OAAA,EAAI,GAAG,CAAC,E,EACpC,C,E,CEjaM,GAAY,EAAkB,AFPhC,EEO4C,SAAS,CAAE,GACrD,GAAa,EFRf,EEQ8C,GFR9C,C,IAOJ,AAAA,EAPI,EAOG,+BAA+B,GAQtC,AAAA,EAfI,EAeG,gBAAgB,CACrB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,EAQD,AAAA,EA5BI,EA4BG,YAAY,OAAO,MAAM,CAAC,CAC/B,YACA,aACA,UACA,YACD,GAYD,AAAA,EA7CI,EA6CG,SAAS,OAAO,MAAM,CAAC,CAC5B,KAAM,OACN,QAAS,UACT,KAAM,OACN,IAAK,KACP,IDpBF,IAAM,EAAO,GCgdb,CAAA,EAAiB,CAAjB,EDhdsB,CACpB,aAPmB,CACnB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,AAGD,GAEM,EAAgB,SAAS,aAAa,CAAC,cACvC,EAAe,EAAc,aAAa,CAAC,oBAC3C,EAAY,EAAc,aAAa,CAAC,mBACxC,EAAmB,EAAc,aAAa,CAAC,yBAC/C,EAAW,EAAc,aAAa,CAAC,qBACvC,EAAe,EAAc,aAAa,CAAC,kBAC3C,EAAa,EAAc,aAAa,CAAC,gBACzC,EAAc,EAAc,aAAa,CAAC,iBAEhD,SAAS,IAOP,EAAiB,WAAW,CAAG,EAAK,QAAQ,GAL5C,AAkCF,WAKE,IAAK,IAJC,EAAO,EAAK,QAAQ,GACpB,EAAU,EAAS,IAAI,CAAC,MAAM,CAC9B,EAAU,EAAS,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAEpC,EAAW,EAAG,EAAW,EAAS,IACzC,IAAK,IAAI,EAAW,EAAG,EAAW,EAAS,IAAY,CACrD,IAAM,EAAO,EAAS,IAAI,CAAC,EAAS,CAAC,KAAK,CAAC,EAAS,CAC9C,EAAQ,CAAI,CAAC,EAAS,CAAC,EAAS,AAEtC,CAAA,EAAK,WAAW,CAAG,GAAS,GAC5B,EAAK,SAAS,CAAG,cAAkD,MAAA,CAApC,EAAS,eAAoB,MAAA,CAAN,GAAU,GAClE,CAEJ,IA/CE,AAOF,WACE,IAAM,EAAa,EAAK,SAAS,GAC3B,EAAa,IAAe,EAAK,MAAM,CAAC,IAAI,CAWlD,OATA,EAAa,SAAS,CAAC,GAAG,CAAC,EAAU,MAAM,EAC3C,EAAW,SAAS,CAAC,GAAG,CAAC,EAAU,MAAM,EACzC,EAAY,SAAS,CAAC,GAAG,CAAC,EAAU,MAAM,EAE1C,EAAa,SAAS,CAAC,MAAM,CAAC,EAAU,OAAO,CAAE,EAAU,KAAK,EAEhE,EAAa,SAAS,CAAC,GAAG,CAAC,EAAa,EAAU,KAAK,CAAG,EAAU,OAAO,EAC3E,EAAa,WAAW,CAAG,EAAa,EAAM,KAAK,CAAG,EAAM,OAAO,CAE3D,GACN,KAAK,EAAK,MAAM,CAAC,IAAI,CACnB,EAAa,SAAS,CAAC,MAAM,CAAC,EAAU,MAAM,EAC9C,KACF,MAAK,EAAK,MAAM,CAAC,GAAG,CAClB,EAAW,SAAS,CAAC,MAAM,CAAC,EAAU,MAAM,EAC5C,KACF,MAAK,EAAK,MAAM,CAAC,IAAI,CACnB,EAAY,SAAS,CAAC,MAAM,CAAC,EAAU,MAAM,CAEjD,CACF,GA9BA,CAgDA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EACE,IAAM,EAAa,EAAK,SAAS,GACT,EAAK,SAAS,CAAC,QAAQ,CAAC,EAAG,GAAG,IAMtD,EAAG,cAAc,GAEb,IAAe,EAAK,MAAM,CAAC,OAAO,GACpC,EAAK,IAAI,CAAC,EAAG,GAAG,EAChB,KAEJ,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACjC,EAAK,SAAS,KAAO,EAAK,MAAM,CAAC,IAAI,CACvC,EAAK,KAAK,GAEV,EAAK,OAAO,GAEd,GACF,GAEA,EAAU,gBAAgB,CAAC,QAAS,WAElC,QAAQ,GAAG,CAAC,EAAK,QAAQ,GAC3B,GAEA,G","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  'use strict';\nvar $197cd56b15c33885$var$CLASSNAME = Object.freeze({\n    Start: 'start',\n    Restart: 'restart',\n    Hidden: 'hidden',\n    ActionButton: 'button'\n});\nvar $197cd56b15c33885$var$LABEL = Object.freeze({\n    Start: 'Start',\n    Restart: 'Restart'\n});\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n'use strict';\n// required for jest to work correctly\n$parcel$global.structuredClone = function(val) {\n    return JSON.parse(JSON.stringify(val));\n};\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref_initialState = _ref.initialState, initialState = _ref_initialState === void 0 ? null : _ref_initialState, _ref_startTilesAmount = _ref.startTilesAmount, startTilesAmount = _ref_startTilesAmount === void 0 ? Game.START_TILES_QUANTITY_DEFAULT : _ref_startTilesAmount, _ref_forcePowerOfTwo = _ref.forcePowerOfTwo, forcePowerOfTwo = _ref_forcePowerOfTwo === void 0 ? false : _ref_forcePowerOfTwo;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        /**\n   * Represents current {@link Game.STATUS|status} of the game\n   * @type {keyof typeof Game.STATUS}\n   * @private\n   * @default Game.STATUS.Idle\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"_status\", Game.STATUS.Idle);\n        /**\n   * Represents current score of the game\n   * @type {number}\n   * @private\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"_score\", 0);\n        /**\n   * Represents the current state (grid) of the game.\n   *\n   * The grid is stored as a 2D array where each element represents a tile.\n   * Empty tiles are represented by `0`, while others contain powers of two.\n   *\n   * @type {number[][]}\n   * @private\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"_state\", void 0);\n        var init = Game.sanitizeState(initialState || structuredClone(Game.DEFAULT_BOARD), forcePowerOfTwo);\n        this._state = init;\n        this.initialState = structuredClone(init);\n        this.startTilesAmount = startTilesAmount;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            /**\n   * Starts the game, setting:\n   * - the {@link Game._status|status} to {@link Game.STATUS.Playing|`playing`}\n   *\n   * Places new tiles on the board. The number of tiles placed at the start is\n   * determined by the `startTilesAmount` property.\n   */ key: \"start\",\n            value: function start() {\n                this._status = Game.STATUS.Playing;\n                for(var i = 0; i < this.startTilesAmount; i++)this.placeNewTile();\n            }\n        },\n        {\n            /**\n   * Restarts the game, resetting:\n   * - the {@link Game._score|score} to `0`,\n   * - the {@link Game._state|state} to {@link DEFAULT_BOARD|default}\n   * - the {@link Game._status|status} to {@link Game.STATUS.Idle|`Idle`}\n   */ key: \"restart\",\n            value: function restart() {\n                this._state = structuredClone(this.initialState);\n                this._status = Game.STATUS.Idle;\n                this._score = 0;\n            // this.start();\n            }\n        },\n        {\n            key: \"size\",\n            get: // #region get (something)\n            /**\n   * Utility getter, used to get current board size (n*n)\n   * @returns {number}\n   */ function get() {\n                return this._state.length;\n            }\n        },\n        {\n            /**\n   * Returns {@link Game._score|current score} of the game\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this._score;\n            }\n        },\n        {\n            /**\n   * Returns {@link Game._state|current state} (grid) of the game\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this._state;\n            }\n        },\n        {\n            /**\n   * Returns {@link Game._status|current status} of the game\n   * @returns {string}\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this._status;\n            }\n        },\n        {\n            // #endregion\n            // #region move handlers\n            key: \"move\",\n            value: function move(key) {\n                if (this._status !== Game.STATUS.Playing) return;\n                switch(key){\n                    case 'ArrowUp':\n                        this.moveUp();\n                        break;\n                    case 'ArrowRight':\n                        this.moveRight();\n                        break;\n                    case 'ArrowDown':\n                        this.moveDown();\n                        break;\n                    case 'ArrowLeft':\n                        this.moveLeft();\n                        break;\n                }\n            }\n        },\n        {\n            key: \"handleMove\",\n            value: function handleMove() {\n                if (this._status !== Game.STATUS.Playing) return;\n                var prevState = structuredClone(this._state);\n                for(var col = 0; col < this.size; col++){\n                    var numbers = [];\n                    for(var row = 0; row < this.size; row++)if (this._state[row][col] !== 0) numbers.push(this._state[row][col]);\n                    var merged = [];\n                    var i = 0;\n                    while(i < numbers.length)if (i + 1 < numbers.length && numbers[i] === numbers[i + 1]) {\n                        var stackedNumber = numbers[i] * 2;\n                        merged.push(stackedNumber);\n                        this._score += stackedNumber;\n                        i += 2;\n                    } else {\n                        merged.push(numbers[i]);\n                        i++;\n                    }\n                    while(merged.length < this.size)merged.push(0);\n                    for(var row1 = 0; row1 < this.size; row1++)this._state[row1][col] = merged[row1];\n                }\n                var hasChanged = this._state.some(function(row, rowIndex) {\n                    return row.some(function(cell, colIndex) {\n                        return cell !== prevState[rowIndex][colIndex];\n                    });\n                });\n                if (hasChanged) this.placeNewTile();\n                this.updateGameStatus();\n            }\n        },\n        {\n            /**\n   * Handles the `ArrowUp` keypress\n   */ key: \"moveUp\",\n            value: function moveUp() {\n                this.handleMove();\n            }\n        },\n        {\n            /**\n   * Handles the `ArrowUp` keypress, rotating the grid 180°,\n   * applying the handler and rotating the grid back\n   */ key: \"moveDown\",\n            value: function moveDown() {\n                this.reverseGrid();\n                this.handleMove();\n                this.reverseGrid();\n            }\n        },\n        {\n            /**\n   * Handles the `ArrowLeft` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° clockwise\n   */ key: \"moveLeft\",\n            value: function moveLeft() {\n                this.rotateClockwise();\n                this.handleMove();\n                this.rotateCounterClockwise();\n            }\n        },\n        {\n            /**\n   * Handles the `ArrowRight` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° counterclockwise\n   */ key: \"moveRight\",\n            value: function moveRight() {\n                this.rotateCounterClockwise();\n                this.handleMove();\n                this.rotateClockwise();\n            }\n        },\n        {\n            /**\n   * Reverses the order of rows in the grid.\n   *\n   * Used as a helper method in grid rotation.\n   */ key: \"reverseGrid\",\n            value: function reverseGrid() {\n                this._state.reverse();\n            }\n        },\n        {\n            /**\n   * Transposes the grid by swapping rows and columns.\n   *\n   * This method is used for rotating the grid by converting rows into columns.\n   */ key: \"transpose\",\n            value: function transpose() {\n                var ref;\n                for(var i = 0; i < this.size; i++)for(var j = i + 1; j < this.size; j++)ref = [\n                    this._state[j][i],\n                    this._state[i][j]\n                ], this._state[i][j] = ref[0], this._state[j][i] = ref[1], ref;\n            }\n        },\n        {\n            /**\n   * Rotates the grid 90° clockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */ key: \"rotateClockwise\",\n            value: function rotateClockwise() {\n                this.transpose();\n                this._state.forEach(function(row) {\n                    return row.reverse();\n                });\n            }\n        },\n        {\n            /**\n   * Rotates the grid 90° counterclockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */ key: \"rotateCounterClockwise\",\n            value: function rotateCounterClockwise() {\n                this._state.forEach(function(row) {\n                    return row.reverse();\n                });\n                this.transpose();\n            }\n        },\n        {\n            // #endregion\n            /**\n   * Updates the game status based on the current game state.\n   *\n   * - If no move is possible, the {@link Game._status|game status}\n   *  is set to `Lost`.\n   * - If the board contains the number 2048, the game status is set to `Won`.\n   *\n   * @returns {void}\n   */ key: \"updateGameStatus\",\n            value: function updateGameStatus() {\n                if (!this.checkMovePossibility()) {\n                    this._status = Game.STATUS.Lost;\n                    return;\n                }\n                var hasWon = this._state.some(function(row) {\n                    return row.includes(2048);\n                });\n                if (hasWon) this._status = Game.STATUS.Won;\n            }\n        },\n        {\n            /**\n   * Returns a random value, either 2 or 4, with a 90% chance of getting 2.\n   *\n   * @returns {number} 2 or 4, depending on the random chance.\n   */ key: \"getTwoOrFour\",\n            value: function getTwoOrFour() {\n                return Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            /**\n   * Places a new tile (either 2 or 4) in a random empty cell on the game board.\n   * The tile is placed in a cell where the current value is 0.\n   * If there are no empty cells, no tile is placed.\n   */ key: \"placeNewTile\",\n            value: function placeNewTile() {\n                var emptyCells = [];\n                for(var row = 0; row < this.size; row++){\n                    for(var col = 0; col < this.size; col++)if (this._state[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomCellIndex = emptyCells[randomCellIndex], row1 = _emptyCells_randomCellIndex.row, col1 = _emptyCells_randomCellIndex.col;\n                    this._state[row1][col1] = this.getTwoOrFour();\n                }\n            }\n        },\n        {\n            /**\n   * Checks whether a move is possible in the current game state.\n   *\n   * A move is possible if:\n   * - There is at least one empty cell (value of 0).\n   * - Or if there are two adjacent cells (horizontally or vertically)\n   * with the same value.\n   *\n   * @returns {boolean} `true` if a move is possible, otherwise `false`.\n   */ key: \"checkMovePossibility\",\n            value: function checkMovePossibility() {\n                for(var row = 0; row < this.size; row++)for(var col = 0; col < this.size; col++){\n                    var cell = this._state[row][col];\n                    if (!cell) return true;\n                    if (col < this.size - 1 && this._state[row][col + 1] === cell) return true;\n                    if (row < this.size - 1 && this._state[row + 1][col] === cell) return true;\n                }\n                return false;\n            }\n        }\n    ], [\n        {\n            key: \"sanitizeState\",\n            value: // #region utility\n            /**\n   * Sanitizes the game state by ensuring that all values are either 0 or\n   * a power of two. Optionally, forces values to the nearest lower power\n   * of two.\n   *\n   * - If `forcePowerOfTwo` is `true`, each value will be replaced with the\n   * nearest lower power of two.\n   * - If `forcePowerOfTwo` is `false`, only values that are already powers\n   * of two are kept, and others are set to 0.\n   *\n   * @param {number[][]} state - The 2D array representing the initial state\n   * of the game board passed as parameter to a constructor.\n   * @param {boolean} [forcePowerOfTwo=false] - Whether to force each value\n   * to be the nearest lower power of two. Defaults to `false`.\n   * @returns {number[][]} A sanitized 2D array with all values being either\n   * 0 or a power of two.\n   */ function sanitizeState(state) {\n                var forcePowerOfTwo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var isPowerOfTwo = function(n) {\n                    return n > 0 && (n & n - 1) === 0;\n                };\n                var getNearestLowerPowerOfTwo = function(n) {\n                    if (n <= 0) return 0;\n                    return Math.pow(2, Math.floor(Math.log2(n)));\n                };\n                var sanitizeValue = function(val) {\n                    if (forcePowerOfTwo) return getNearestLowerPowerOfTwo(val);\n                    return isPowerOfTwo(val) ? val : 0;\n                };\n                return state.map(function(row) {\n                    return row.map(sanitizeValue);\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n/**\n   * Default number of starting tiles.\n   * @readonly\n   * @const\n   * @type {number}\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"START_TILES_QUANTITY_DEFAULT\", 2);\n/**\n   * The default board configuration (a 4x4 grid of zeros).\n   * @readonly\n   * @const\n   * @type {number[][]}\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"DEFAULT_BOARD\", [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\n/**\n   * List of keys that represent movement directions.\n   * @readonly\n   * @const\n   * @type {Array<string>}\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"MOVE_KEYS\", Object.freeze([\n    'ArrowLeft',\n    'ArrowRight',\n    'ArrowUp',\n    'ArrowDown'\n]));\n/**\n   * Enum for the status of the game.\n   * - `Idle`: The game has not started and is idling.\n   * - `Playing`: The game has started and is in progress.\n   * - `Lost`: The game has finished and the player lost.\n   * - `Won`: The game has finished and the player won.\n   *\n   * @readonly\n   * @enum {string}\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"STATUS\", Object.freeze({\n    Idle: 'idle',\n    Playing: 'playing',\n    Lost: 'lose',\n    Won: 'win'\n}));\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n// initialize the game with parameters:\n/**\n * const game = new Game({\n      startTilesAmount: 5,\n      initialState: [\n        [0, 0, 0, 0],\n        [0, 4, 0, 0],\n        [0, 0, 9, 0],\n        [0, 0, 0, 2],\n      ],\n      forcePowerOfTwo: true,\n});\n */ var $197cd56b15c33885$var$initialState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports({\n    initialState: $197cd56b15c33885$var$initialState\n});\nvar $197cd56b15c33885$var$gameContainer = document.querySelector('.container');\nvar $197cd56b15c33885$var$actionButton = $197cd56b15c33885$var$gameContainer.querySelector('.controls button');\nvar $197cd56b15c33885$var$scoreInfo = $197cd56b15c33885$var$gameContainer.querySelector('.controls .info');\nvar $197cd56b15c33885$var$scoreNumberField = $197cd56b15c33885$var$gameContainer.querySelector('.controls .game-score');\nvar $197cd56b15c33885$var$gameGrid = $197cd56b15c33885$var$gameContainer.querySelector('.game-field tbody');\nvar $197cd56b15c33885$var$messageStart = $197cd56b15c33885$var$gameContainer.querySelector('.message-start');\nvar $197cd56b15c33885$var$messageWin = $197cd56b15c33885$var$gameContainer.querySelector('.message-win');\nvar $197cd56b15c33885$var$messageLose = $197cd56b15c33885$var$gameContainer.querySelector('.message-lose');\nfunction $197cd56b15c33885$var$renderGame() {\n    $197cd56b15c33885$var$updateScoreDisplay();\n    $197cd56b15c33885$var$updateGameBoard();\n    $197cd56b15c33885$var$updateGameStatusMessage();\n}\nfunction $197cd56b15c33885$var$updateScoreDisplay() {\n    $197cd56b15c33885$var$scoreNumberField.textContent = $197cd56b15c33885$var$game.getScore();\n}\nfunction $197cd56b15c33885$var$updateGameStatusMessage() {\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    var isGameIdle = gameStatus === $3d28d7f1aac198f5$exports.STATUS.Idle;\n    $197cd56b15c33885$var$messageStart.classList.add($197cd56b15c33885$var$CLASSNAME.Hidden);\n    $197cd56b15c33885$var$messageWin.classList.add($197cd56b15c33885$var$CLASSNAME.Hidden);\n    $197cd56b15c33885$var$messageLose.classList.add($197cd56b15c33885$var$CLASSNAME.Hidden);\n    $197cd56b15c33885$var$actionButton.classList.remove($197cd56b15c33885$var$CLASSNAME.Restart, $197cd56b15c33885$var$CLASSNAME.Start);\n    $197cd56b15c33885$var$actionButton.classList.add(isGameIdle ? $197cd56b15c33885$var$CLASSNAME.Start : $197cd56b15c33885$var$CLASSNAME.Restart);\n    $197cd56b15c33885$var$actionButton.textContent = isGameIdle ? $197cd56b15c33885$var$LABEL.Start : $197cd56b15c33885$var$LABEL.Restart;\n    switch(gameStatus){\n        case $3d28d7f1aac198f5$exports.STATUS.Idle:\n            $197cd56b15c33885$var$messageStart.classList.remove($197cd56b15c33885$var$CLASSNAME.Hidden);\n            break;\n        case $3d28d7f1aac198f5$exports.STATUS.Won:\n            $197cd56b15c33885$var$messageWin.classList.remove($197cd56b15c33885$var$CLASSNAME.Hidden);\n            break;\n        case $3d28d7f1aac198f5$exports.STATUS.Lost:\n            $197cd56b15c33885$var$messageLose.classList.remove($197cd56b15c33885$var$CLASSNAME.Hidden);\n            break;\n    }\n}\nfunction $197cd56b15c33885$var$updateGameBoard() {\n    var grid = $197cd56b15c33885$var$game.getState();\n    var numRows = $197cd56b15c33885$var$gameGrid.rows.length;\n    var numCols = $197cd56b15c33885$var$gameGrid.rows[0].cells.length;\n    for(var rowIndex = 0; rowIndex < numRows; rowIndex++)for(var colIndex = 0; colIndex < numCols; colIndex++){\n        var cell = $197cd56b15c33885$var$gameGrid.rows[rowIndex].cells[colIndex];\n        var value = grid[rowIndex][colIndex];\n        cell.textContent = value || '';\n        cell.className = \"field-cell \".concat(value ? \"field-cell--\".concat(value) : '');\n    }\n}\ndocument.addEventListener('keydown', function(ev) {\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    var validKeyPressed = $3d28d7f1aac198f5$exports.MOVE_KEYS.includes(ev.key);\n    if (!validKeyPressed) return;\n    ev.preventDefault();\n    if (gameStatus === $3d28d7f1aac198f5$exports.STATUS.Playing) {\n        $197cd56b15c33885$var$game.move(ev.key);\n        $197cd56b15c33885$var$renderGame();\n    }\n});\n$197cd56b15c33885$var$actionButton.addEventListener('click', function() {\n    if ($197cd56b15c33885$var$game.getStatus() === $3d28d7f1aac198f5$exports.STATUS.Idle) $197cd56b15c33885$var$game.start();\n    else $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$renderGame();\n});\n$197cd56b15c33885$var$scoreInfo.addEventListener('click', function() {\n    // eslint-disable-next-line no-console\n    console.log($197cd56b15c33885$var$game.getState());\n});\n$197cd56b15c33885$var$renderGame();\n\n})();\n//# sourceMappingURL=2048.9ab0b50e.js.map\n","'use strict';\n\nconst CLASSNAME = Object.freeze({\n  Start: 'start',\n  Restart: 'restart',\n  Hidden: 'hidden',\n  ActionButton: 'button',\n});\nconst LABEL = Object.freeze({\n  Start: 'Start',\n  Restart: 'Restart',\n});\n\nconst Game = require('../modules/Game.class');\n\n// initialize the game with parameters:\n/**\n * const game = new Game({\n      startTilesAmount: 5,\n      initialState: [\n        [0, 0, 0, 0],\n        [0, 4, 0, 0],\n        [0, 0, 9, 0],\n        [0, 0, 0, 2],\n      ],\n      forcePowerOfTwo: true,\n});\n */\n\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst game = new Game({\n  initialState,\n});\n\nconst gameContainer = document.querySelector('.container');\nconst actionButton = gameContainer.querySelector('.controls button');\nconst scoreInfo = gameContainer.querySelector('.controls .info');\nconst scoreNumberField = gameContainer.querySelector('.controls .game-score');\nconst gameGrid = gameContainer.querySelector('.game-field tbody');\nconst messageStart = gameContainer.querySelector('.message-start');\nconst messageWin = gameContainer.querySelector('.message-win');\nconst messageLose = gameContainer.querySelector('.message-lose');\n\nfunction renderGame() {\n  updateScoreDisplay();\n  updateGameBoard();\n  updateGameStatusMessage();\n}\n\nfunction updateScoreDisplay() {\n  scoreNumberField.textContent = game.getScore();\n}\n\nfunction updateGameStatusMessage() {\n  const gameStatus = game.getStatus();\n  const isGameIdle = gameStatus === Game.STATUS.Idle;\n\n  messageStart.classList.add(CLASSNAME.Hidden);\n  messageWin.classList.add(CLASSNAME.Hidden);\n  messageLose.classList.add(CLASSNAME.Hidden);\n\n  actionButton.classList.remove(CLASSNAME.Restart, CLASSNAME.Start);\n\n  actionButton.classList.add(isGameIdle ? CLASSNAME.Start : CLASSNAME.Restart);\n  actionButton.textContent = isGameIdle ? LABEL.Start : LABEL.Restart;\n\n  switch (gameStatus) {\n    case Game.STATUS.Idle:\n      messageStart.classList.remove(CLASSNAME.Hidden);\n      break;\n    case Game.STATUS.Won:\n      messageWin.classList.remove(CLASSNAME.Hidden);\n      break;\n    case Game.STATUS.Lost:\n      messageLose.classList.remove(CLASSNAME.Hidden);\n      break;\n  }\n}\n\nfunction updateGameBoard() {\n  const grid = game.getState();\n  const numRows = gameGrid.rows.length;\n  const numCols = gameGrid.rows[0].cells.length;\n\n  for (let rowIndex = 0; rowIndex < numRows; rowIndex++) {\n    for (let colIndex = 0; colIndex < numCols; colIndex++) {\n      const cell = gameGrid.rows[rowIndex].cells[colIndex];\n      const value = grid[rowIndex][colIndex];\n\n      cell.textContent = value || '';\n      cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', (ev) => {\n  const gameStatus = game.getStatus();\n  const validKeyPressed = Game.MOVE_KEYS.includes(ev.key);\n\n  if (!validKeyPressed) {\n    return;\n  }\n\n  ev.preventDefault();\n\n  if (gameStatus === Game.STATUS.Playing) {\n    game.move(ev.key);\n    renderGame();\n  }\n});\n\nactionButton.addEventListener('click', () => {\n  if (game.getStatus() === Game.STATUS.Idle) {\n    game.start();\n  } else {\n    game.restart();\n  }\n  renderGame();\n});\n\nscoreInfo.addEventListener('click', () => {\n  // eslint-disable-next-line no-console\n  console.log(game.getState());\n});\n\nrenderGame();\n","'use strict';\n\n// required for jest to work correctly\nglobal.structuredClone = (val) => JSON.parse(JSON.stringify(val));\n\nclass Game {\n  /**\n   * Default number of starting tiles.\n   * @readonly\n   * @const\n   * @type {number}\n   */\n  static START_TILES_QUANTITY_DEFAULT = 2;\n\n  /**\n   * The default board configuration (a 4x4 grid of zeros).\n   * @readonly\n   * @const\n   * @type {number[][]}\n   */\n  static DEFAULT_BOARD = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  /**\n   * List of keys that represent movement directions.\n   * @readonly\n   * @const\n   * @type {Array<string>}\n   */\n  static MOVE_KEYS = Object.freeze([\n    'ArrowLeft',\n    'ArrowRight',\n    'ArrowUp',\n    'ArrowDown',\n  ]);\n\n  /**\n   * Enum for the status of the game.\n   * - `Idle`: The game has not started and is idling.\n   * - `Playing`: The game has started and is in progress.\n   * - `Lost`: The game has finished and the player lost.\n   * - `Won`: The game has finished and the player won.\n   *\n   * @readonly\n   * @enum {string}\n   */\n  static STATUS = Object.freeze({\n    Idle: 'idle',\n    Playing: 'playing',\n    Lost: 'lose',\n    Won: 'win',\n  });\n\n  /**\n   * Represents current {@link Game.STATUS|status} of the game\n   * @type {keyof typeof Game.STATUS}\n   * @private\n   * @default Game.STATUS.Idle\n   */\n  _status = Game.STATUS.Idle;\n  /**\n   * Represents current score of the game\n   * @type {number}\n   * @private\n   */\n  _score = 0;\n  /**\n   * Represents the current state (grid) of the game.\n   *\n   * The grid is stored as a 2D array where each element represents a tile.\n   * Empty tiles are represented by `0`, while others contain powers of two.\n   *\n   * @type {number[][]}\n   * @private\n   */\n  _state;\n\n  /**\n   * Creates a new game instance.\n   *\n   * This constructor initializes the game with a given board state and the\n   * number of tiles to be placed at the start. It also allows for sanitizing\n   * the state (if necessary) to ensure that only valid values are used on the\n   * board.\n   *\n   * @param {Object} options - The configuration options for the game instance.\n   * @param {number[][]} [options.initialState=null] - The initial state of\n   *   the board.\n   *\n   * If provided, the board will be initialized with the passed array, which\n   * must adhere to the 2D grid format. The values in the grid must either be\n   * `0` (empty space) or a power of 2 (e.g., 2, 4, 8, etc.). If no\n   * `initialState` is provided, the game will use the\n   * {@link DEFAULT_BOARD|default grid}.\n   *   @default\n   *   [\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0],\n   *     [0, 0, 0, 0]\n   *   ]\n   *\n   * @param {number} [options.startTilesAmount=2] - The initial number of\n   *   random tiles to be placed on the board at the start of the game. This\n   *   is the number of tiles with values `2` or `4` that will be randomly\n   *   placed on the grid when the game begins. The tiles are placed randomly\n   *   in empty spots (values of `0`). If not provided,\n   * {@link START_TILES_QUANTITY_DEFAULT|default value} will be used.\n   *   @default 2\n   *\n   * @param {boolean} [options.forcePowerOfTwo=false] - Flag to determine\n   *   whether the grid values should be sanitized to ensure they are all\n   *   powers of two.\n   *   - If `true`, all values that are not powers of 2 will be adjusted to\n   *     the nearest lower power of 2 or set to `0`.\n   *   - If `false`, invalid values will be set to `0`.\n   *   @default false\n   */\n\n  constructor({\n    initialState = null,\n    startTilesAmount = Game.START_TILES_QUANTITY_DEFAULT,\n    forcePowerOfTwo = false,\n  } = {}) {\n    const init = Game.sanitizeState(\n      initialState || structuredClone(Game.DEFAULT_BOARD),\n      forcePowerOfTwo,\n    );\n\n    this._state = init;\n    this.initialState = structuredClone(init);\n    this.startTilesAmount = startTilesAmount;\n  }\n\n  /**\n   * Starts the game, setting:\n   * - the {@link Game._status|status} to {@link Game.STATUS.Playing|`playing`}\n   *\n   * Places new tiles on the board. The number of tiles placed at the start is\n   * determined by the `startTilesAmount` property.\n   */\n  start() {\n    this._status = Game.STATUS.Playing;\n\n    for (let i = 0; i < this.startTilesAmount; i++) {\n      this.placeNewTile();\n    }\n  }\n\n  /**\n   * Restarts the game, resetting:\n   * - the {@link Game._score|score} to `0`,\n   * - the {@link Game._state|state} to {@link DEFAULT_BOARD|default}\n   * - the {@link Game._status|status} to {@link Game.STATUS.Idle|`Idle`}\n   */\n  restart() {\n    this._state = structuredClone(this.initialState);\n    this._status = Game.STATUS.Idle;\n    this._score = 0;\n    // this.start();\n  }\n\n  // #region get (something)\n\n  /**\n   * Utility getter, used to get current board size (n*n)\n   * @returns {number}\n   */\n  get size() {\n    return this._state.length;\n  }\n\n  /**\n   * Returns {@link Game._score|current score} of the game\n   * @returns {number}\n   */\n  getScore() {\n    return this._score;\n  }\n\n  /**\n   * Returns {@link Game._state|current state} (grid) of the game\n   * @returns {number[][]}\n   */\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Returns {@link Game._status|current status} of the game\n   * @returns {string}\n   */\n  getStatus() {\n    return this._status;\n  }\n\n  // #endregion\n\n  // #region move handlers\n\n  move(key) {\n    if (this._status !== Game.STATUS.Playing) {\n      return;\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        this.moveUp();\n        break;\n      case 'ArrowRight':\n        this.moveRight();\n        break;\n      case 'ArrowDown':\n        this.moveDown();\n        break;\n      case 'ArrowLeft':\n        this.moveLeft();\n        break;\n    }\n  }\n\n  handleMove() {\n    if (this._status !== Game.STATUS.Playing) {\n      return;\n    }\n\n    const prevState = structuredClone(this._state);\n\n    for (let col = 0; col < this.size; col++) {\n      const numbers = [];\n\n      for (let row = 0; row < this.size; row++) {\n        if (this._state[row][col] !== 0) {\n          numbers.push(this._state[row][col]);\n        }\n      }\n\n      const merged = [];\n      let i = 0;\n\n      while (i < numbers.length) {\n        if (i + 1 < numbers.length && numbers[i] === numbers[i + 1]) {\n          const stackedNumber = numbers[i] * 2;\n\n          merged.push(stackedNumber);\n          this._score += stackedNumber;\n          i += 2;\n        } else {\n          merged.push(numbers[i]);\n          i++;\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        this._state[row][col] = merged[row];\n      }\n    }\n\n    const hasChanged = this._state.some(\n      (row, rowIndex) =>\n        row.some((cell, colIndex) => cell !== prevState[rowIndex][colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    if (hasChanged) {\n      this.placeNewTile();\n    }\n\n    this.updateGameStatus();\n  }\n\n  /**\n   * Handles the `ArrowUp` keypress\n   */\n  moveUp() {\n    this.handleMove();\n  }\n\n  /**\n   * Handles the `ArrowUp` keypress, rotating the grid 180°,\n   * applying the handler and rotating the grid back\n   */\n  moveDown() {\n    this.reverseGrid();\n    this.handleMove();\n    this.reverseGrid();\n  }\n\n  /**\n   * Handles the `ArrowLeft` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° clockwise\n   */\n  moveLeft() {\n    this.rotateClockwise();\n    this.handleMove();\n    this.rotateCounterClockwise();\n  }\n\n  /**\n   * Handles the `ArrowRight` keypress\n   * and performing the same action as {@link Game.moveDown|moveDown()}, by\n   * rotating the matrix by 90° counterclockwise\n   */\n  moveRight() {\n    this.rotateCounterClockwise();\n    this.handleMove();\n    this.rotateClockwise();\n  }\n\n  /**\n   * Reverses the order of rows in the grid.\n   *\n   * Used as a helper method in grid rotation.\n   */\n  reverseGrid() {\n    this._state.reverse();\n  }\n\n  /**\n   * Transposes the grid by swapping rows and columns.\n   *\n   * This method is used for rotating the grid by converting rows into columns.\n   */\n  transpose() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = i + 1; j < this.size; j++) {\n        [this._state[i][j], this._state[j][i]] = [\n          this._state[j][i],\n          this._state[i][j],\n        ];\n      }\n    }\n  }\n\n  /**\n   * Rotates the grid 90° clockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */\n  rotateClockwise() {\n    this.transpose();\n    this._state.forEach((row) => row.reverse());\n  }\n\n  /**\n   * Rotates the grid 90° counterclockwise.\n   *\n   * This is done by {@link Game.transpose|transposing}\n   * the grid and then {@link Game.reverseGrid|reversing} each row.\n   */\n  rotateCounterClockwise() {\n    this._state.forEach((row) => row.reverse());\n    this.transpose();\n  }\n\n  // #endregion\n\n  /**\n   * Updates the game status based on the current game state.\n   *\n   * - If no move is possible, the {@link Game._status|game status}\n   *  is set to `Lost`.\n   * - If the board contains the number 2048, the game status is set to `Won`.\n   *\n   * @returns {void}\n   */\n  updateGameStatus() {\n    if (!this.checkMovePossibility()) {\n      this._status = Game.STATUS.Lost;\n\n      return;\n    }\n\n    const hasWon = this._state.some((row) => row.includes(2048));\n\n    if (hasWon) {\n      this._status = Game.STATUS.Won;\n    }\n  }\n\n  // #region utility\n\n  /**\n   * Sanitizes the game state by ensuring that all values are either 0 or\n   * a power of two. Optionally, forces values to the nearest lower power\n   * of two.\n   *\n   * - If `forcePowerOfTwo` is `true`, each value will be replaced with the\n   * nearest lower power of two.\n   * - If `forcePowerOfTwo` is `false`, only values that are already powers\n   * of two are kept, and others are set to 0.\n   *\n   * @param {number[][]} state - The 2D array representing the initial state\n   * of the game board passed as parameter to a constructor.\n   * @param {boolean} [forcePowerOfTwo=false] - Whether to force each value\n   * to be the nearest lower power of two. Defaults to `false`.\n   * @returns {number[][]} A sanitized 2D array with all values being either\n   * 0 or a power of two.\n   */\n  static sanitizeState(state, forcePowerOfTwo = false) {\n    const isPowerOfTwo = (n) => n > 0 && (n & (n - 1)) === 0;\n\n    const getNearestLowerPowerOfTwo = (n) => {\n      if (n <= 0) {\n        return 0;\n      }\n\n      return Math.pow(2, Math.floor(Math.log2(n)));\n    };\n\n    const sanitizeValue = (val) => {\n      if (forcePowerOfTwo) {\n        return getNearestLowerPowerOfTwo(val);\n      }\n\n      return isPowerOfTwo(val) ? val : 0;\n    };\n\n    return state.map((row) => row.map(sanitizeValue));\n  }\n\n  /**\n   * Returns a random value, either 2 or 4, with a 90% chance of getting 2.\n   *\n   * @returns {number} 2 or 4, depending on the random chance.\n   */\n  getTwoOrFour() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  /**\n   * Places a new tile (either 2 or 4) in a random empty cell on the game board.\n   * The tile is placed in a cell where the current value is 0.\n   * If there are no empty cells, no tile is placed.\n   */\n  placeNewTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this._state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomCellIndex];\n\n      this._state[row][col] = this.getTwoOrFour();\n    }\n  }\n\n  /**\n   * Checks whether a move is possible in the current game state.\n   *\n   * A move is possible if:\n   * - There is at least one empty cell (value of 0).\n   * - Or if there are two adjacent cells (horizontally or vertically)\n   * with the same value.\n   *\n   * @returns {boolean} `true` if a move is possible, otherwise `false`.\n   */\n  checkMovePossibility() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const cell = this._state[row][col];\n\n        if (!cell) {\n          return true;\n        }\n\n        if (col < this.size - 1 && this._state[row][col + 1] === cell) {\n          return true;\n        }\n\n        if (row < this.size - 1 && this._state[row + 1][col] === cell) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // #endregion\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["$parcel$global","globalThis","self","window","global","$197cd56b15c33885$var$CLASSNAME","Object","freeze","Start","Restart","Hidden","ActionButton","$197cd56b15c33885$var$LABEL","$3d28d7f1aac198f5$exports","$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","$cd5a47cf8ef6d766$export$71511d61b312f219","obj","value","structuredClone","val","JSON","parse","stringify","$3d28d7f1aac198f5$var$Game","protoProps","staticProps","Game","_ref","arguments","_ref_initialState","initialState","_ref_startTilesAmount","startTilesAmount","START_TILES_QUANTITY_DEFAULT","_ref_forcePowerOfTwo","forcePowerOfTwo","instance","TypeError","STATUS","Idle","init","sanitizeState","DEFAULT_BOARD","_state","_status","Playing","placeNewTile","_score","get","moveUp","moveRight","moveDown","moveLeft","prevState","col","size","numbers","row","push","merged","stackedNumber","row1","hasChanged","some","rowIndex","cell","colIndex","updateGameStatus","handleMove","reverseGrid","rotateClockwise","rotateCounterClockwise","reverse","ref","j","transpose","forEach","checkMovePossibility","Lost","hasWon","includes","Won","Math","random","emptyCells","randomCellIndex","floor","_emptyCells_randomCellIndex","col1","getTwoOrFour","state","sanitizeValue","n","pow","log2","isPowerOfTwo","map","Constructor","prototype","$197cd56b15c33885$var$game","$197cd56b15c33885$var$gameContainer","document","querySelector","$197cd56b15c33885$var$actionButton","$197cd56b15c33885$var$scoreInfo","$197cd56b15c33885$var$scoreNumberField","$197cd56b15c33885$var$gameGrid","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$renderGame","textContent","getScore","$197cd56b15c33885$var$updateGameBoard","grid","getState","numRows","rows","numCols","cells","className","concat","$197cd56b15c33885$var$updateGameStatusMessage","gameStatus","getStatus","isGameIdle","classList","add","remove","addEventListener","ev","MOVE_KEYS","preventDefault","move","start","restart","console","log"],"version":3,"file":"2048.9ab0b50e.js.map"}